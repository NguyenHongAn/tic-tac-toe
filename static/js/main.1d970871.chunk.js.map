{"version":3,"sources":["Components/Square.js","Components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","state","value","HandleOnClick","click","className","onClick","this","React","Component","Board","size","squares","Array","fill","isXTurn","position","maxSize","maxStep","CalculateWinner","bind","preProps","restart","setState","i","Math","floor","j","count","k","factor","abs","length","slice","status","winner","style","setGridStyle","map","turn","key","HandleClick","App","SetBoardSize","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d970871.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../App.css';\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n      this.state = {\r\n        value: null\r\n      };\r\n      this.HandleOnClick = this.props.click;\r\n    }\r\n  \r\n  \r\n    render() {\r\n      return (\r\n        <button className=\"square\" onClick={() => this.HandleOnClick()}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Square;","import '../App.css';\r\nimport React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      const size = this.props.size;\r\n      this.state = {\r\n        squares: Array(size*size).fill(null),\r\n        isXTurn: true,\r\n        position: -1,\r\n        maxSize: size,\r\n        maxStep: 3,\r\n      };\r\n      this.CalculateWinner = this.CalculateWinner.bind(this);\r\n    }\r\n  \r\n    componentDidUpdate(preProps)\r\n    {\r\n      const size = this.props.size;\r\n      //console.log(`Change from ${preProps.restart} to ${this.props.restart}`);\r\n      if (size !== preProps.size || this.props.restart !== preProps.restart)\r\n      {\r\n        this.setState({\r\n          squares: Array(size*size).fill(null),\r\n          maxSize: this.props.size,\r\n        })\r\n      }\r\n    }\r\n  \r\n    CalculateWinner(squares, position, maxSize, maxStep)\r\n    {\r\n        let size = maxSize;\r\n        const i = Math.floor(position /size);\r\n        const j = Math.floor(position % size);\r\n        let count = 0;\r\n        //ngang\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && squares[size*i+k]===squares[position])\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === maxStep)\r\n        {\r\n            return squares[position];\r\n        }\r\n        count = 0;\r\n        //Doc\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && squares[size*k+j]===squares[position])\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n        if (count === maxStep)\r\n        {\r\n            return squares[position];\r\n        }\r\n        //cheo tu trai sang phia\r\n        count = 0;\r\n       \r\n        let factor = Math.abs(i-j);\r\n        j>i? size=1: size = maxSize;\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if(factor*size+ maxSize*k+k < squares.length)\r\n            {\r\n                if (squares[position] && squares[factor*size+ maxSize*k+k]===squares[position])\r\n                {\r\n                    count++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        \r\n\r\n        if (count === maxStep)\r\n        {\r\n            return squares[position];\r\n        }\r\n\r\n        //cheo tu phai sang trai\r\n\r\n         count = 0;\r\n        factor = i+j;\r\n        i>j? size=1: size = maxSize;\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if((factor)+(size-1)*i + maxSize*k-k < squares.length)\r\n            {\r\n                if (squares[position] && squares[(factor)+(size-1)*i + maxSize*k-k]===squares[position])\r\n                {\r\n                    count++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        \r\n\r\n        if (count === maxStep)\r\n        {\r\n            return squares[position];\r\n        }\r\n\r\n        return null;\r\n    }\r\n  \r\n    HandleClick(i)\r\n    {\r\n      let {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      squares = squares.slice();\r\n      if (this.CalculateWinner(squares,position,maxSize,maxStep)|| squares[i])\r\n      {\r\n          return;\r\n      }\r\n      // is x turn\r\n\r\n      if (isXTurn)\r\n      {\r\n        squares[i] = 'X';\r\n      }\r\n      else{\r\n        squares[i] = \"O\";\r\n      }\r\n      \r\n      this.setState({\r\n        squares: squares,\r\n        isXTurn: !this.state.isXTurn,\r\n        position: i,\r\n      });\r\n    }\r\n  \r\n    setGridStyle(maxSize)\r\n    {\r\n      return {\r\n  \r\n        \"justifyContent\": \"center\",\r\n        \"display\": \"grid\",\r\n        \"gridTemplateColumns\":`repeat(${maxSize},4em)` ,\r\n        \"gridTemplateRows\": `repeat(${maxSize},4em)`,\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      const {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      const winner = this.CalculateWinner(squares, position, maxSize, maxStep);\r\n      let status;\r\n      if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      }\r\n      else{\r\n        status = 'Next player: ' + (isXTurn ? 'X' : 'O');\r\n      }\r\n      \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div style={this.setGridStyle(this.state.maxSize)}>\r\n          {\r\n            squares.map((turn,i) => <Square key={i} value={turn} click={() => this.HandleClick(i)} ></Square>)\r\n          }\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Components/Board';\n\n\nclass App extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state ={\n      maxSize: 3,\n      restart: false,\n    };\n    this.SetBoardSize = this.SetBoardSize.bind(this);\n  }\n\n  SetBoardSize(size)\n  {\n    console.log(size);\n    this.setState({\n      maxSize: size,\n      restart: !this.state.restart,\n    });\n  }\n\n  render()\n  {\n    const size = this.state.maxSize;\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">   \n            <h2> TIC - TAC - TOE GAME </h2>\n            <div>\n              \n            <button className=\"restart-btn\" onClick={() =>{this.SetBoardSize(size)}}> Restart </button>\n            <div className=\"dropdown\">\n            <button className=\"dropbtn\">Board Size</button>\n            <div className=\"dropdown-content\">\n              <button onClick={() =>{this.SetBoardSize(3)}}>3x3</button>\n              <button onClick={() =>{this.SetBoardSize(4)}}>4x4</button>\n              <button onClick={() =>{this.SetBoardSize(5)}}>5x5</button>\n            </div>\n          </div>\n            </div>\n          \n      </header>\n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board size={this.state.maxSize} restart={this.state.restart}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
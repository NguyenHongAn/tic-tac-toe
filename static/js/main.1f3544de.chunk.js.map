{"version":3,"sources":["Components/Square.js","Components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","squareStyle","click","value","strClassName","className","onClick","Board","props","useState","squares","setSquares","step","isXTurn","setIsXTurn","position","setPosition","maxSize","size","saveHistory","save","useEffect","console","log","restart","status","CalculateWinner","maxStep","line","i","Math","floor","j","matrix","length","push","slice","k","msg","row","col","every","IsDrawn","tempSquares","Array","from","winner","style","setGridStyle","map","turn","key","newsquares","pos","HandleClick","includes","App","setMaxSize","setRestart","stepNumber","setStepNumber","fill","history","setHistory","setBoardSize","square","move","desc","jumpToMove","id","onChange","e","temp","sortedHistory","target","sort","a","b","sortListOfMoves","name","defaultValue","ame","newSquares","newHistory","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f3544de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../App.css';\r\n\r\nfunction Square({squareStyle, click, value}) {\r\n      const strClassName = squareStyle ? squareStyle + \" square\": \"square\";\r\n      return (\r\n        <button className={strClassName} onClick={click}>\r\n          {value}\r\n        </button>\r\n      );\r\n  }\r\n\r\nexport default Square;","import '../App.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Square from './Square';\r\n\r\nfunction Board(props) {\r\n    \r\n    const [squares, setSquares] = useState(props.squares);\r\n\r\n    const [isXTurn, setIsXTurn] = useState(props.step % 2);\r\n    const [position, setPosition] = useState(-1);\r\n    const maxSize = props.size;\r\n    const maxStep = 3;\r\n    const saveHistory = props.save;\r\n    \r\n\r\n    useEffect(() =>{\r\n      console.log(\"Sqqqq\");\r\n      setSquares(props.squares);\r\n      setIsXTurn(props.step % 2 === 0);\r\n    }, [props.restart, props.squares, props.step]);\r\n  \r\n    //Check if match is draw or not\r\n    // input: squares = array of symbol which is represent for position of X or O in board\r\n    const IsDrawn = (squares) =>{\r\n      return squares.every(value => value !==null);\r\n    }\r\n\r\n    // Check if we have a winner or not \r\n    //\r\n    //\r\n    //\r\n    //\r\n    //return: null if game isn't finnish or object{\r\n    //  msg: {X,O} if we have winner or string \"======= Draw =======\"\r\n    //  line: array of position of winning line\r\n    //};\r\n    //  \r\n    const CalculateWinner = (squares, position, maxSize, maxStep) =>\r\n    {\r\n        let size = maxSize;\r\n        let line =[];\r\n        const i = Math.floor(position /size);\r\n        const j = Math.floor(position % size);\r\n        \r\n\r\n        let matrix = [];\r\n        for (let i =0 ; i< squares.length; i+= maxSize)\r\n        {\r\n          matrix.push(squares.slice(i,maxSize+i));\r\n        }\r\n        //ngang\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && matrix[i][k]===squares[position])\r\n            {\r\n              line.push(size*i+k);\r\n\r\n            }\r\n            else if(line.length !==0)\r\n            {\r\n              break;\r\n            }\r\n        }\r\n\r\n        if (line.length >= maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            }\r\n        }\r\n        line = [];\r\n        //Doc\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && matrix[k][j]===squares[position])\r\n            {\r\n              line.push(size*k+j);\r\n            }\r\n            else if(line.length !==0)\r\n            {\r\n              break;\r\n            }\r\n        }\r\n\r\n        if (line.length >= maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n        //cheo tu trai sang phia\r\n        line = [];\r\n       \r\n        let row = 0, col = 0;\r\n        i>j? row = i-j: col = j-i;\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if(row+k < maxSize && col+k<maxSize)\r\n            {\r\n                if (squares[position] && matrix[row+k][col+k]===squares[position])\r\n                {\r\n                    line.push((row+k)*size + col+k);\r\n                }\r\n                else if(line.length !==0)\r\n                {\r\n                  break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (line.length >= maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n\r\n        //cheo tu phai sang trai\r\n\r\n        line = [];\r\n        col =0;\r\n        row = 0;  \r\n        if (i + j > maxSize -1)\r\n        {\r\n          col = maxSize - 1;\r\n          row = i+j - (maxSize -1);\r\n        }\r\n        else\r\n        {\r\n          col = i+j;\r\n        }\r\n\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if(row + k <maxSize && col - k >= 0)\r\n            {\r\n                if (squares[position] && matrix[row + k][col - k]===squares[position])\r\n                {\r\n                    line.push((row+k)*maxSize +col -k);\r\n                }\r\n                else if(line.length !==0)\r\n                {\r\n                  break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (line.length >= maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n\r\n        if (IsDrawn(squares))\r\n        {\r\n          const result = {\r\n                 msg: \"===== Draw =====\",\r\n                };\r\n          return result;\r\n        }\r\n\r\n        return null;\r\n    }\r\n  \r\n    const HandleClick = (i) =>\r\n    {\r\n      //const {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      \r\n      //B1: Immutable \r\n      //create temp array and slice it \r\n      let newsquares = Array.from(squares).slice();\r\n\r\n      //B2: Check if the game is finnish or not and this position was checked of not\r\n      if (CalculateWinner(newsquares,position,maxSize,maxStep)|| newsquares[i])\r\n      {\r\n          return;\r\n      }\r\n\r\n      //B3: declare turn \r\n      // is x turn\r\n      if (isXTurn)\r\n      {\r\n        newsquares[i] = 'X';\r\n      }\r\n      else{\r\n        newsquares[i] = \"O\";\r\n      }\r\n      \r\n      //B4; update state and re-render component\r\n        setSquares(newsquares);\r\n        setIsXTurn(!isXTurn);\r\n        setPosition(i);\r\n      \r\n      saveHistory({\r\n        squares: newsquares,\r\n        pos: i\r\n      });\r\n    }\r\n  \r\n    const setGridStyle = (maxSize) =>\r\n    {\r\n      return {\r\n  \r\n        \"justifyContent\": \"center\",\r\n        \"display\": \"grid\",\r\n        \"gridTemplateColumns\":`repeat(${maxSize},4em)` ,\r\n        \"gridTemplateRows\": `repeat(${maxSize},4em)`,\r\n      }\r\n    }\r\n  \r\n    \r\n      //const {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      const tempSquares = Array.from(squares);\r\n      const winner = CalculateWinner(tempSquares, position, maxSize, maxStep);\r\n      let status;\r\n      if (winner) {\r\n        if(winner.msg.length > 2)\r\n        {\r\n          status = winner.msg;\r\n        }\r\n        else\r\n        {\r\n          status = 'Winner: ' + winner.msg;\r\n          console.log(winner.line);\r\n        }\r\n      }\r\n      else{\r\n        status = 'Next player: ' + (isXTurn ? 'X' : 'O');\r\n      }\r\n      \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div style={setGridStyle(maxSize)}>\r\n          {\r\n            squares.map((turn,i) => {\r\n            return <Square key={i} value={turn} click={() => HandleClick(i)}\r\n             squareStyle={\r\n               (winner && winner.line && winner.line.includes(i))?\r\n               \"active\":null\r\n              }\r\n             ></Square>\r\n            }\r\n             )\r\n          }\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n  \r\n\r\nexport default Board;","import React, {useState} from 'react';\nimport './App.css';\nimport Board from './Components/Board';\n\n\nfunction App() {\n\n  // constructor(props)\n  // {\n  //   super(props);\n  //   this.state ={\n  //     maxSize: 3,\n  //     restart: false,\n  //     history:[\n  //       {\n  //         squares: Array(9).fill(null),\n  //         pos:-1,\n  //       },\n  //     ],\n  //     stepNumber: 0,\n  //   };\n  //   this.SaveHistory =this.SaveHistory.bind(this);\n  //   this.SetBoardSize = this.SetBoardSize.bind(this);\n  //   this.JumpToMove = this.JumpToMove.bind(this);\n  //   this.SortListOfMoves = this.SortListOfMoves.bind(this);\n  // }\n\n  const [maxSize, setMaxSize] = useState(3);\n  const [restart, setRestart] = useState(false);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [history, setHistory] = useState([{\n                                            squares: Array(9).fill(null),\n                                            pos:-1,\n                                        }]);\n\n  // save history just checked                                      \n  const saveHistory = (newSquares) =>\n  {\n    //B1: Immuatable copy variable\n\n    //const {history, stepNumber} = this.state;\n    let newHistory = Array.from(history).slice(0, stepNumber +1);\n    \n    //B2: push in history's list\n    newHistory.push(newSquares);\n    \n    setHistory(newHistory);\n    setStepNumber(newHistory.length - 1);\n   \n  }\n\n  //set board size with new size and re-render App\n  const setBoardSize = (size) =>\n  {\n    \n    \n      setMaxSize(size);\n      setRestart(restart);\n      setHistory([\n        {\n          squares: Array(size*size).fill(null),\n          pos: -1,\n        }\n      ])\n      setStepNumber(0);\n    \n  }\n\n  const jumpToMove = (move) =>{  \n      setStepNumber(move);\n      setRestart(!restart);\n  }\n\n  //sort list of moves with escend or descend\n  const sortListOfMoves = (e) =>{\n    //B1: copy variable\n    const temp = Array.from(history);\n    let sortedHistory = [];\n\n    //B2: sorted by ascend or descend\n    if (e.target.value === \"Ascend\")\n    {\n      sortedHistory = temp.sort((a,b)=>{\n        return a.pos-b.pos;\n      });\n    }\n    else if(e.target.value===\"Descend\")\n    {\n      sortedHistory = temp.sort((a,b)=>{\n        return b.pos -a.pos;\n      });\n    }\n    else{\n      sortedHistory =temp;\n    }\n\n    //B3: re-render for game\n    \n    setHistory(sortedHistory);\n    \n  }\n\n    //const {maxSize, restart, history, stepNumber} = this.state;\n    //console.log(stepNumber)\n    let squares = history[stepNumber].squares;\n    if (squares.every(square=> square === null))\n    {\n      squares = history[0].squares;\n    }\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">   \n            <h2> TIC - TAC - TOE GAME </h2>\n            <div>\n              \n            <button className=\"restart-btn\" onClick={() =>{setBoardSize(maxSize)}}> Restart </button>\n            <div className=\"dropdown\">\n            <button className=\"dropbtn\">Board Size</button>\n            <div className=\"dropdown-content\">\n              <button onClick={() =>{setBoardSize(3)}}>3x3</button>\n              <button onClick={() =>{setBoardSize(4)}}>4x4</button>\n              <button onClick={() =>{setBoardSize(5)}}>5x5</button>\n            </div>\n          </div>\n          <div className=\"dropdown\">\n            <button className=\"dropbtn\">History</button>\n            <div className=\"dropdown-content\">\n              {\n                history.map((step, move)=>{\n                  const pos = step.pos;\n                  let desc = \"\";\n                  if(pos !== -1)\n                  {\n                    desc += ` (${Math.floor(pos/maxSize)}, ${pos%maxSize})`;\n                  }\n                  return <button key={move} onClick={()=>{jumpToMove(move)}}>\n                    {\n                      stepNumber === move? (<b>Go to move #{move} {desc}</b>): `Go to move #${move} ${desc}`\n                    }\n                    </button>\n                })\n              }\n              \n            </div>\n          </div>\n          <select id=\"sort\" onChange={(e) => sortListOfMoves(e)}>\n            <option name=\"none\" defaultValue=\"None\">None</option>\n            <option name=\"Ascend\" value=\"Ascend\">Ascend</option>\n            <option ame=\"Descend\" value=\"Descend\">Descend</option>\n          </select>\n        </div>\n          \n      </header>\n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={squares} size={maxSize} restart={restart} save={saveHistory} step={stepNumber}/>\n        </div>\n        \n      </div>\n    </div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
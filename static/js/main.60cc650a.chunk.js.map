{"version":3,"sources":["Components/Square.js","Components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","state","value","class","HandleOnClick","click","preProps","strClassName","this","setState","className","onClick","React","Component","Board","IsDrawn","squares","every","size","isXTurn","step","position","maxSize","maxStep","CalculateWinner","bind","SaveHistory","save","restart","line","i","Math","floor","j","msg","matrix","length","push","slice","console","log","k","Ngang","Doc","row","col","Left","Right","newsquares","pos","status","winner","style","setGridStyle","map","turn","key","HandleClick","includes","App","newSquares","history","stepNumber","newHistory","JumpToMove","move","SortListOfMoves","e","sortedHistory","target","sort","a","b","Array","fill","SetBoardSize","desc","id","onChange","name","defaultValue","ame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60cc650a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../App.css';\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n      this.state = {\r\n        value: null,\r\n        class: this.props.class,\r\n      };\r\n      this.HandleOnClick = this.props.click;\r\n    }\r\n  \r\n    componentDidUpdate(preProps)\r\n    {\r\n      const strClassName = this.props.class;\r\n      if(strClassName !== preProps.class)\r\n      {\r\n        this.setState({\r\n          class: strClassName,\r\n        })\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      const strClassName = this.state.class ? this.state.class + \" square\": \"square\";\r\n      return (\r\n        <button className={strClassName} onClick={this.HandleOnClick}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Square;","import '../App.css';\r\nimport React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        squares: this.props.squares,\r\n        size: this.props.size,\r\n        isXTurn: (this.props.step % 2) === 0,\r\n        position: -1,\r\n        maxSize: this.props.size,\r\n        maxStep: 3,\r\n      };\r\n      this.CalculateWinner = this.CalculateWinner.bind(this);\r\n      this.SaveHistory = this.props.save;\r\n    }\r\n  \r\n    componentDidUpdate(preProps)\r\n    {\r\n      const {squares,restart,size} = this.props;\r\n      if (restart !== preProps.restart)\r\n      {\r\n        this.setState({\r\n          squares: squares,\r\n          maxSize: size,\r\n          isXTurn: (this.props.step % 2) === 0\r\n        })\r\n      }\r\n    }\r\n  \r\n    IsDrawn = (squares) =>{\r\n      return squares.every(value => value !==null);\r\n    }\r\n\r\n    CalculateWinner(squares, position, maxSize, maxStep)\r\n    {\r\n        let size = maxSize;\r\n        let line =[];\r\n        const i = Math.floor(position /size);\r\n        const j = Math.floor(position % size);\r\n        if (this.IsDrawn(squares))\r\n        {\r\n          const result = {\r\n                 msg: \"===== Draw =====\",\r\n                };\r\n          return result;\r\n        }\r\n\r\n        let matrix = [];\r\n        for (let i =0 ; i< squares.length; i+= maxSize)\r\n        {\r\n          matrix.push(squares.slice(i,maxSize+i));\r\n        }\r\n        console.log(matrix);\r\n        //ngang\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && matrix[i][k]===squares[position])\r\n            {\r\n              line.push(size*i+k);\r\n\r\n            }\r\n            else if(line.length !==0)\r\n            {\r\n              break;\r\n            }\r\n        }\r\n        //\r\n        console.log({Ngang: line});\r\n        if (line.length === maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            }\r\n        }\r\n        line = [];\r\n        //Doc\r\n        for (let k = 0; k< size;k++)\r\n        {\r\n            if (squares[position] && matrix[k][j]===squares[position])\r\n            {\r\n              line.push(size*k+j);\r\n            }\r\n            else if(line.length !==0)\r\n            {\r\n              break;\r\n            }\r\n        }\r\n\r\n        //\r\n        console.log({Doc: line});\r\n        if (line.length === maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n        //cheo tu trai sang phia\r\n        line = [];\r\n       \r\n        let row = 0, col = 0;\r\n        i>j? row = i-j: col = j-i;\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if(row+k < maxSize && col+k<maxSize)\r\n            {\r\n                if (squares[position] && matrix[row+k][col+k]===squares[position])\r\n                {\r\n                    line.push((row+k)*size + col+k);\r\n                }\r\n                else if(line.length !==0)\r\n                {\r\n                  break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        //\r\n        console.log({Left: line});\r\n        if (line.length === maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n\r\n        //cheo tu phai sang trai\r\n\r\n        line = [];\r\n        col =0;\r\n        row = 0;  \r\n        if (i + j > maxSize -1)\r\n        {\r\n          col = maxSize - 1;\r\n          row = i+j - (maxSize -1);\r\n        }\r\n        else\r\n        {\r\n          col = i+j;\r\n        }\r\n\r\n        for(let k=0;k<maxSize;k++)\r\n        {\r\n            \r\n            if(row + k <maxSize && col - k >= 0)\r\n            {\r\n                if (squares[position] && matrix[row + k][col - k]===squares[position])\r\n                {\r\n                    line.push((row+k)*maxSize +col -k);\r\n                }\r\n                else if(line.length !==0)\r\n                {\r\n                  break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        //\r\n        console.log({Right: line});\r\n\r\n        if (line.length === maxStep)\r\n        {\r\n            return {\r\n              msg: squares[position],\r\n              line: line,\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n  \r\n    HandleClick(i)\r\n    {\r\n      const {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      let newsquares = squares.slice();\r\n      if (this.CalculateWinner(newsquares,position,maxSize,maxStep)|| newsquares[i])\r\n      {\r\n          return;\r\n      }\r\n      // is x turn\r\n\r\n      if (isXTurn)\r\n      {\r\n        newsquares[i] = 'X';\r\n      }\r\n      else{\r\n        newsquares[i] = \"O\";\r\n      }\r\n      \r\n      this.setState({\r\n        squares: newsquares,\r\n        isXTurn: !this.state.isXTurn,\r\n        position: i,\r\n      });\r\n      this.SaveHistory({\r\n        squares: newsquares,\r\n        pos: i\r\n      });\r\n    }\r\n  \r\n    setGridStyle(maxSize)\r\n    {\r\n      return {\r\n  \r\n        \"justifyContent\": \"center\",\r\n        \"display\": \"grid\",\r\n        \"gridTemplateColumns\":`repeat(${maxSize},4em)` ,\r\n        \"gridTemplateRows\": `repeat(${maxSize},4em)`,\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      const {squares, isXTurn, position, maxSize, maxStep} = this.state;\r\n      const winner = this.CalculateWinner(squares, position, maxSize, maxStep);\r\n      let status;\r\n      if (winner) {\r\n        if(winner.msg.length > 2)\r\n        {\r\n          status = winner.msg;\r\n        }\r\n        else\r\n        {\r\n          status = 'Winner: ' + winner.msg;\r\n          console.log(winner.line);\r\n        }\r\n      }\r\n      else{\r\n        status = 'Next player: ' + (isXTurn ? 'X' : 'O');\r\n      }\r\n      \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div style={this.setGridStyle(this.state.maxSize)}>\r\n          {\r\n            squares.map((turn,i) => {\r\n            return <Square key={i} value={turn} click={() => this.HandleClick(i)}\r\n             class={\r\n               (winner && winner.line && winner.line.includes(i))?\r\n               \"active\":null\r\n              }\r\n             ></Square>\r\n            }\r\n             )\r\n          }\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Components/Board';\n\n\nclass App extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state ={\n      maxSize: 3,\n      restart: false,\n      history:[\n        {\n          squares: Array(9).fill(null),\n          pos:-1,\n        },\n      ],\n      stepNumber: 0,\n    };\n    this.SaveHistory =this.SaveHistory.bind(this);\n    this.SetBoardSize = this.SetBoardSize.bind(this);\n    this.JumpToMove = this.JumpToMove.bind(this);\n    this.SortListOfMoves = this.SortListOfMoves.bind(this);\n  }\n\n  SaveHistory =(newSquares) =>\n  {\n    //B1: copy variable\n    const {history, stepNumber} = this.state;\n    let newHistory = history.slice(0, stepNumber +1);\n    \n    //B2: push in history's list\n    newHistory.push(newSquares);\n    this.setState({\n      history: newHistory,\n      stepNumber: newHistory.length - 1\n    });\n    console.log({history: newHistory});\n  }\n\n  SetBoardSize(size)\n  {\n    //debug\n    this.setState({\n      maxSize: size,\n      restart: !this.state.restart,\n      history: [\n        {\n          squares: Array(size*size).fill(null),\n          pos: -1,\n        }\n      ],\n      stepNumber: 0,\n    });\n  }\n\n  JumpToMove = (move) =>{\n    this.setState({\n      stepNumber: move,\n      restart: !this.state.restart,\n    });\n  }\n\n  SortListOfMoves = (e)=>{\n    //B1: copy variable\n    const {history, maxSize} = this.state;\n    let sortedHistory = [];\n\n    //B2: sorted by ascend or descend\n    if (e.target.value === \"Ascend\")\n    {\n      sortedHistory = history.sort((a,b)=>{\n        return a.pos-b.pos;\n      });\n    }\n    else if(e.target.value===\"Descend\")\n    {\n      sortedHistory = history.sort((a,b)=>{\n        return b.pos -a.pos;\n      });\n    }\n    else{\n      sortedHistory.push({\n          squares: Array(maxSize*maxSize).fill(null),\n          pos: -1,\n        });\n    }\n\n    //B3: re-render for game\n    this.setState({\n      history: sortedHistory,\n    })\n  }\n\n  render()\n  {\n    const {maxSize, restart, history, stepNumber} = this.state;\n    console.log(stepNumber)\n    const squares = history[stepNumber].squares;\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">   \n            <h2> TIC - TAC - TOE GAME </h2>\n            <div>\n              \n            <button className=\"restart-btn\" onClick={() =>{this.SetBoardSize(maxSize)}}> Restart </button>\n            <div className=\"dropdown\">\n            <button className=\"dropbtn\">Board Size</button>\n            <div className=\"dropdown-content\">\n              <button onClick={() =>{this.SetBoardSize(3)}}>3x3</button>\n              <button onClick={() =>{this.SetBoardSize(4)}}>4x4</button>\n              <button onClick={() =>{this.SetBoardSize(5)}}>5x5</button>\n            </div>\n          </div>\n          <div className=\"dropdown\">\n            <button className=\"dropbtn\">History</button>\n            <div className=\"dropdown-content\">\n              {\n                history.map((step, move)=>{\n                  const pos = step.pos;\n                  let desc = \"\";\n                  if(pos !== -1)\n                  {\n                    desc += ` (${Math.floor(pos/maxSize)}, ${pos%maxSize})`;\n                  }\n                  return <button onClick={()=>{this.JumpToMove(move)}}>\n                    {\n                      stepNumber === move? (<b>Go to move #{move} {desc}</b>): `Go to move #${move} ${desc}`\n                    }\n                    </button>\n                })\n              }\n              \n            </div>\n          </div>\n          <select id=\"sort\" onChange={(e) => this.SortListOfMoves(e)}>\n            <option name=\"none\" defaultValue=\"None\">None</option>\n            <option name=\"Ascend\" value=\"Ascend\">Ascend</option>\n            <option ame=\"Descend\" value=\"Descend\">Descend</option>\n          </select>\n        </div>\n          \n      </header>\n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={squares} size={maxSize} restart={restart} save={this.SaveHistory} step={stepNumber}/>\n        </div>\n        \n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}